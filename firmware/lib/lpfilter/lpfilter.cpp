#include "lpfilter.h"

#include <stdlib.h> // For malloc/free
#include <string.h> // For memset

float lpfilter_coefficients[480] = 
{
0.000000051180443703, 0.000000240861056588, 0.000000080559618147, 0.000000084100467847, 0.000000003679719851, -0.000000096737344265, -0.000000210595455474, -0.000000308590597178, -0.000000363931348768, -0.000000355352072743, -0.000000275217491241, -0.000000133037567136, 0.000000044630324197, 0.000000219876522056, 0.000000352466299264, 0.000000411182477821, 0.000000383064757927, 0.000000278968680773, 0.000000131805896269, -0.000000011516250641, -0.000000103801320574, -0.000000112381873786, -0.000000031504297425, 0.000000112824493833, 0.000000266859744558, 0.000000363022479889, 0.000000339464733709, 0.000000161591268435, -0.000000162656152600, -0.000000576925446254, -0.000000985651223547, -0.000001274624107369, -0.000001343023443280, -0.000001131007741008, -0.000000643279910434, 0.000000043244569095, 0.000000793304960359, 0.000001442088649220, 0.000001837210800389, 0.000001878993235795, 0.000001551350452919, 0.000000931049203588, 0.000000172473536650, -0.000000531695055063, -0.000001001876132266, -0.000001123387527967, -0.000000883360199544, -0.000000380492531088, 0.000000198551642979, 0.000000629339504657, 0.000000716388721693, 0.000000358080741584, -0.000000410890860176, -0.000001413720854667, -0.000002365894412594, -0.000002947681421511, -0.000002893951399082, -0.000002078682960614, -0.000000570803289461, 0.000001360975587274, 0.000003297683356110, 0.000004766789543180, 0.000005365096117726, 0.000004871779039981, 0.000003326418181068, 0.000001037814386034, -0.000001474737624114, -0.000003606843781226, -0.000004824410045577, -0.000004814630107472, -0.000003585747697983, -0.000001486851086256, 0.000000867327386272, 0.000002751716412546, 0.000003532478999041, 0.000002860652740553, 0.000000804777350711, -0.000002123186752114, -0.000005064776568957, -0.000007023764621726, -0.000007139766921086, -0.000004960480631119, -0.000000636309573609, 0.000005024441605228, 0.000010673377241867, 0.000014705170578828, 0.000015654806964065, 0.000012622416778345, 0.000005622930527195, -0.000004237006187162, -0.000014820309149976, -0.000023279003712169, -0.000026591445070190, -0.000022226739729752, -0.000008807237365183, 0.000013369750591921, 0.000042074416647504, 0.000073228113935990, 0.000101345980831569, 0.000120287208220121, 0.000124203261440135, 0.000108534847555821, 0.000070895716865130, 0.000011698250850686, -0.000065582393403241, -0.000154552661571016, -0.000246438535482988, -0.000330947674298612, -0.000397348100978947, -0.000435636611533696, -0.000437670178515108, -0.000398151797879274, -0.000315385093116995, -0.000191739533545038, -0.000033792457082390, 0.000147869787815594, 0.000339195422275341, 0.000523547220633287, 0.000682896238997266, 0.000799283100671822, 0.000856472043305153, 0.000841684097476308, 0.000747260929390609, 0.000572081483105233, 0.000322541589700130, 0.000012919536140282, -0.000335010636728379, -0.000693186125153176, -0.001029266750294537, -0.001309332537273583, -0.001501057476486581, -0.001577067648045238, -0.001518145904480560, -0.001315928604685558, -0.000974770861122848, -0.000512517920780616, 0.000039977540395398, 0.000640642356584148, 0.001239187903331597, 0.001781135713505054, 0.002306253913202452, 0.002913850646644690, 0.002644359040900509, 0.002522415090673721, 0.002041632065427527, 0.001353095932568578, 0.000497657183309784, -0.000431518449816187, -0.001341977847693309, -0.002147668802411044, -0.002782927307356883, -0.003207896882833928, -0.003407912249444246, -0.003386043708062602, -0.003152811545922718, -0.002716184529067254, -0.002077064355572875, -0.001231704150513042, -0.000182760259205965, 0.001044729401126710, 0.002387354026532158, 0.003733818100904201, 0.004927790905714591, 0.005785720331327652, 0.006128435764892286, 0.005820449366763699, 0.004808088920457262, 0.003145864669404427, 0.001001945788901557, -0.001361474126074273, -0.003631497285014877, -0.005502542112781838, -0.006735890815920280, -0.007205825445166208, -0.006920453031604493, -0.006011056868464854, -0.004690932602116034, -0.003194715056138433, -0.001715789399240349, -0.000359814118178759, 0.000872013832361398, 0.002063565561338760, 0.003331325819754550, 0.004753955581691004, 0.006307942842572406, 0.007830519184096165, 0.009024676064926145, 0.009514648007481081, 0.008942251612299008, 0.007077782318896481, 0.003917587254147275, -0.000261124196199442, -0.004914508925678050, -0.009318070209342253, -0.012708061538147932, -0.014452898150520267, -0.014206136566119673, -0.012001223126231256, -0.008261592702673560, -0.003711828224577684, 0.000789826816095661, 0.004455423006107348, 0.006762444948687373, 0.007576038090658337, 0.007173635332579271, 0.006146851404976043, 0.005215440360219933, 0.004989902707532637, 0.005759081706974842, 0.007359292035657202, 0.009177313052106803, 0.010294829202366977, 0.009749157701831233, 0.006843319952635423, 0.001423388061817280, -0.005964015411089141, -0.014091535751827696, -0.021267988212298972, -0.025713329788951439, -0.026012266102136385, -0.021531491999350751, -0.012687255192709364, -0.000974376887653843, 0.011276735171572579, 0.021381832246560633, 0.026928346570264480, 0.026401560327667387, 0.019657587932140556, 0.008113056278468575, -0.005419451323608757, -0.017240186970939566, -0.023524977224083057, -0.021181208858863081, -0.008607257459809472, 0.013822381363565244, 0.043672966223667148, 0.076804718251842735, 0.108108263830614545, 0.132475152360225973, 0.145800000000000013, 0.145800000000000013, 0.132475152360225973, 0.108108263830614532, 0.076804718251842721, 0.043672966223667155, 0.013822381363565242, -0.008607257459809467, -0.021181208858863081, -0.023524977224083057, -0.017240186970939569, -0.005419451323608752, 0.008113056278468575, 0.019657587932140553, 0.026401560327667384, 0.026928346570264480, 0.021381832246560633, 0.011276735171572579, -0.000974376887653843, -0.012687255192709367, -0.021531491999350748, -0.026012266102136385, -0.025713329788951439, -0.021267988212298979, -0.014091535751827696, -0.005964015411089141, 0.001423388061817279, 0.006843319952635424, 0.009749157701831228, 0.010294829202366979, 0.009177313052106799, 0.007359292035657203, 0.005759081706974840, 0.004989902707532638, 0.005215440360219935, 0.006146851404976042, 0.007173635332579270, 0.007576038090658333, 0.006762444948687373, 0.004455423006107350, 0.000789826816095661, -0.003711828224577684, -0.008261592702673562, -0.012001223126231256, -0.014206136566119670, -0.014452898150520269, -0.012708061538147932, -0.009318070209342250, -0.004914508925678050, -0.000261124196199443, 0.003917587254147274, 0.007077782318896480, 0.008942251612299003, 0.009514648007481086, 0.009024676064926145, 0.007830519184096166, 0.006307942842572406, 0.004753955581691004, 0.003331325819754550, 0.002063565561338760, 0.000872013832361398, -0.000359814118178759, -0.001715789399240350, -0.003194715056138432, -0.004690932602116035, -0.006011056868464854, -0.006920453031604492, -0.007205825445166208, -0.006735890815920277, -0.005502542112781838, -0.003631497285014877, -0.001361474126074273, 0.001001945788901557, 0.003145864669404427, 0.004808088920457264, 0.005820449366763699, 0.006128435764892289, 0.005785720331327652, 0.004927790905714591, 0.003733818100904201, 0.002387354026532158, 0.001044729401126709, -0.000182760259205966, -0.001231704150513042, -0.002077064355572874, -0.002716184529067254, -0.003152811545922717, -0.003386043708062603, -0.003407912249444246, -0.003207896882833927, -0.002782927307356884, -0.002147668802411046, -0.001341977847693308, -0.000431518449816187, 0.000497657183309784, 0.001353095932568578, 0.002041632065427528, 0.002522415090673721, 0.002644359040900509, 0.002913850646644690, 0.002306253913202452, 0.001781135713505054, 0.001239187903331597, 0.000640642356584148, 0.000039977540395398, -0.000512517920780616, -0.000974770861122848, -0.001315928604685558, -0.001518145904480560, -0.001577067648045237, -0.001501057476486582, -0.001309332537273584, -0.001029266750294537, -0.000693186125153176, -0.000335010636728379, 0.000012919536140282, 0.000322541589700131, 0.000572081483105233, 0.000747260929390609, 0.000841684097476308, 0.000856472043305153, 0.000799283100671822, 0.000682896238997266, 0.000523547220633287, 0.000339195422275341, 0.000147869787815594, -0.000033792457082390, -0.000191739533545039, -0.000315385093116995, -0.000398151797879274, -0.000437670178515108, -0.000435636611533696, -0.000397348100978947, -0.000330947674298612, -0.000246438535482988, -0.000154552661571016, -0.000065582393403241, 0.000011698250850686, 0.000070895716865130, 0.000108534847555821, 0.000124203261440135, 0.000120287208220121, 0.000101345980831569, 0.000073228113935990, 0.000042074416647504, 0.000013369750591921, -0.000008807237365183, -0.000022226739729752, -0.000026591445070190, -0.000023279003712169, -0.000014820309149976, -0.000004237006187162, 0.000005622930527195, 0.000012622416778345, 0.000015654806964065, 0.000014705170578828, 0.000010673377241867, 0.000005024441605228, -0.000000636309573609, -0.000004960480631119, -0.000007139766921086, -0.000007023764621726, -0.000005064776568957, -0.000002123186752114, 0.000000804777350711, 0.000002860652740553, 0.000003532478999041, 0.000002751716412546, 0.000000867327386272, -0.000001486851086256, -0.000003585747697983, -0.000004814630107472, -0.000004824410045577, -0.000003606843781226, -0.000001474737624114, 0.000001037814386034, 0.000003326418181068, 0.000004871779039981, 0.000005365096117726, 0.000004766789543180, 0.000003297683356110, 0.000001360975587274, -0.000000570803289461, -0.000002078682960614, -0.000002893951399082, -0.000002947681421511, -0.000002365894412594, -0.000001413720854667, -0.000000410890860176, 0.000000358080741584, 0.000000716388721693, 0.000000629339504657, 0.000000198551642979, -0.000000380492531088, -0.000000883360199544, -0.000001123387527967, -0.000001001876132266, -0.000000531695055063, 0.000000172473536650, 0.000000931049203588, 0.000001551350452919, 0.000001878993235795, 0.000001837210800389, 0.000001442088649220, 0.000000793304960359, 0.000000043244569095, -0.000000643279910434, -0.000001131007741008, -0.000001343023443280, -0.000001274624107369, -0.000000985651223547, -0.000000576925446254, -0.000000162656152600, 0.000000161591268435, 0.000000339464733709, 0.000000363022479889, 0.000000266859744558, 0.000000112824493833, -0.000000031504297425, -0.000000112381873786, -0.000000103801320574, -0.000000011516250641, 0.000000131805896269, 0.000000278968680773, 0.000000383064757927, 0.000000411182477821, 0.000000352466299264, 0.000000219876522056, 0.000000044630324197, -0.000000133037567136, -0.000000275217491241, -0.000000355352072743, -0.000000363931348768, -0.000000308590597178, -0.000000210595455474, -0.000000096737344265, 0.000000003679719851, 0.000000084100467847, 0.000000080559618147, 0.000000240861056588, 0.000000051180443703};


lpfilterType *lpfilter_create( void )
{
    lpfilterType *result = (lpfilterType *)malloc( sizeof( lpfilterType ) ); // Allocate memory for the object
    lpfilter_init( result );                                               // Initialize it
    return result;                                                        // Return the result
}

void lpfilter_destroy( lpfilterType *pObject )
{
    free( pObject );
}

void lpfilter_init( lpfilterType * pThis )
{
    lpfilter_reset( pThis );
}

void lpfilter_reset( lpfilterType * pThis )
{
    memset( &pThis->state, 0, sizeof( pThis->state ) ); // Reset state to 0
    pThis->pointer = pThis->state;                      // History buffer points to start of state buffer
    pThis->output = 0;                                  // Reset output
}

int lpfilter_filterBlock( lpfilterType * pThis, float * pInput, float * pOutput, unsigned int count )
{
    float *pOriginalOutput = pOutput;               // Save original output so we can track the number of samples processed
    float accumulator;

    for( ;count; --count )
    {
        pThis->pointer[lpfilter_length] = *pInput;                   // Copy sample to top of history buffer
        *(pThis->pointer++) = *(pInput++);                         // Copy sample to bottom of history buffer

        if( pThis->pointer >= pThis->state + lpfilter_length )       // Handle wrap-around
            pThis->pointer -= lpfilter_length;

        accumulator = 0;
        lpfilter_dotProduct( pThis->pointer, lpfilter_coefficients, &accumulator, lpfilter_length );

        *(pOutput++) = accumulator;  // Store the result
    }

    return pOutput - pOriginalOutput;
}

void lpfilter_dotProduct( float * pInput, float * pKernel, float * pAccumulator, short count )
{
    float accumulator = *pAccumulator;
    while( count-- )
        accumulator += ((float)*(pKernel++)) * *(pInput++);
    *pAccumulator = accumulator;
}


